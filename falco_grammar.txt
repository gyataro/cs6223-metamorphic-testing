_rule: MACRO
            | field _space EXISTS
            | field _space _operator _space _value
            | field _space _set_operator _space set
            | group
            | not
            | and
            | or

group: "(" _space _rule _space ")"
not: "not" _space _rule
and: _rule _space "and" _space _rule
or: _rule _space "or" _space _rule

_space: " "*
_operator: EQ | NEQ | LEQ | LS | GEQ | GTR | CONTAINS | ICONTAINS | STARTSWITH | ENDSWITH | GLOB | REGEX
EXISTS: "exists"
EQ: "="
NEQ: "!="
LEQ: "<="
LS: "<"
GEQ: ">="
GTR: ">"
CONTAINS: "contains"
ICONTAINS: "icontains"
STARTSWITH: "startswith"
ENDSWITH: "endswith"
GLOB: "glob"
REGEX: "regex"

_set_operator: IN | INTERSECTS | PMATCH
IN: "in"
INTERSECTS: "intersects"
PMATCH: "pmatch"

CLASS: /[a-z0-9]+/
SUBCLASS: /[a-z0-9_]+/
INDEX: "[" DIGIT+ "]"
field: CLASS ("." SUBCLASS)+ (INDEX)?

MACRO: IDENTIFIER

_value: NUMBER | BOOLEAN | SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING | UNQUOTED_STRING
BOOLEAN: "true" | "false"
NUMBER: SIGNED_NUMBER
UNQUOTED_STRING: /[a-zA-Z0-9_\.\/\\\-<>:\[\]]+/
SINGLE_QUOTED_STRING: /'[^']*'/
DOUBLE_QUOTED_STRING: /"([^"\\]*(\\.[^"\\]*)*)"/

set: "(" (_element (_set_sep _element)*)? ")"
_set_sep: "," " "*
_element: NUMBER | SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING | UNQUOTED_STRING

%import common.ESCAPED_STRING
%import common.LETTER
%import common.SIGNED_NUMBER
%import common.DIGIT
%import common.CNAME -> IDENTIFIER